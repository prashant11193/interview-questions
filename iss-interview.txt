What is php and what is it used for?
    PHP(short for Hypertext PreProcessor) is the most widely used open source and general purpose server side scripting language used mainly in web development to create dynamic websites and applications. It was developed in 1994 by Rasmus Lerdorf. PHP is not only used to build the web apps like Facebook, Slack but is also used to build many CMS (Content Management System) like WordPress, Drupal, Shopify, WooCommerce etc.

    PHP can actually do anything related to server-side scripting or more popularly known as the backend of a website. 
    For example, PHP can receive data from forms, generate dynamic page content, can work with databases, create sessions, send emails etc. 
    There are also many hash functions available in PHP to encrypt user’s data that makes PHP secure and reliable to be used as a server-side scripting language.
    Advantages:
    Platform Independent
    Open source and dynamic Library support
    Organized
    Database Connectivity
    Easy to understand and code
    Gives Web Developer More Control
    Easy integration and consistency
    Maintenance
    Stability
    Performance
    Reliability
    Scalability
    Compatibility


What is mvc architecture?
    MVC stands for "Model view And Controller".
    MVC is a software architectural pattern for implementing user interfaces.
    It divides a given application into three interconnected parts.
    This is done to separate the Business logic & Application data from the USER interface.
    The main advantage of MVC Architecture is Reusability, Security and Increasing the performance of Application.
    Model: 
        Represent database CRUD operations.
        Model is not aware about the presentation of data and How the data will be display to the browser.
        The Model object contain all the data that need to be displayed.

    View: 
        The View represents the presentation of the application.
        End-user GUI through which user can interact with the application, i.e., HTML, CSS.

    Controller: 
        Whenever the user sends a request for something, it always goes through Controller.
        A controller is responsible for intercepting the request from view and passes to the model for appropriate action.
        After the action has been taken on the data, the controller is responsible for directly passes the appropriate view to the user.
        In graphical user interfaces, controller and view work very closely together.
        

What is the difference between include and require statements?
    PHP allows us to create various elements and functions, which are used several times in many pages. It takes much time to script these functions in multiple pages. Therefore, use the concept of file inclusion that helps to include files in various programs and saves the effort of writing code multiple times.

    "PHP allows you to include file so that a page content can be reused many times. It is very helpful to include files when you want to apply the same HTML or PHP code to multiple pages of a website." There are two ways to include file in PHP i.e include() & require(). Both include and require are identical to each other, except failure.

    include : generates a warning, i.e., E_WARNING, and continue the execution of the script.
        include 'filename ';  
                Or   
        include ('filename');  
    require : generates a fatal error, i.e., E_COMPILE_ERROR, and stop the execution of the script.
        require 'filename';  
                Or   
        require ('filename');  
    Advantages :
    Code Reusability: By the help of include and require construct, we can reuse HTML code or PHP script in many PHP scripts.
    Easy editable: If we want to change anything in webpages, edit the source file included in all webpage rather than editing in all the files separately.


How can you improve the performance of php applications?
    Enable OPCache on PHP Server
        e.g
            php-script
                -execute
                    -check opcode cache
                        -yes
                            -read from shared memory and executed by zend engine -> ouput
                        - no
                            parse -> compile to opcodes ->save to shared memory and executed by zend engine.

        OPcache improves PHP performance by storing precompiled scripts in shared memory. That way, PHP does not have to load & parse scripts at each request.
        With OPcache, the steps are removed so you can directly launch or execute the application.
        All the subsequent requests skip the compilation phase. Only the new code updates are compiled & stored
        Opcode caching via the OPcache is integrated into PHP 5.5+ by default.

    Cache and Minify Static Assets (CSS, JS, Images)
        Minification is the process of removing unnecessary characters from the source code. It is done without changing the functionality of the code.
        The characters can be white spaces, line breaks, and comments. It is readable for humans but inessential for machines.
        Minifying reduces the size of your source code & makes it more efficient. It decreases load times & bandwidth usage and processing time.

    Code Optimization
        remove unwanted code and redundancy.
        optimizing sql queries.

    Single and double quote usage matters
        Double-quoted strings will look first for some variables in it before it displays the string itself; that’s why it’s slightly slower than printing strings in single quotes.

    Configure Memcache For Database
    Update PHP Version
    Improve Code for Better Process
    Deploy PHP on Cloud Hosting


Can you explain the difference between get and post methods in php?
    We can create and use forms in PHP. To get form data, we need to use PHP superglobals $_GET and $_POST.
    The form request may be get or post. To retrieve data from get request, we need to use $_GET, for post request $_POST.
    Get request :
        the default form request.
        The data passed through get request is visible on the URL browser so it is not secured.
        we can send limited amount of data through get request.
    Post request :
        widely used to submit form that have large amount of data such as file upload, image upload, login form, registration form etc.
        The data passed through post request is not visible on the URL browser so it is secured. You can send large amount of data through post request.

What is a php session? How does it work?
    When we work with an application, we open it, do some changes, and then we close it. This is much like a Session. The computer knows who we are. It knows when we start the application and when we end. But on the internet there is one problem: the web server does not know who we are or what we do, because the HTTP address doesn't maintain state.
    Most sessions set a user-key on the user's computer that looks something like 32 characters -  765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.
    PHP session is used to store and pass information from one page to another temporarily
    PHP session technique is widely used in shopping websites where we need to store and pass cart information e.g. username, product code, product name, product price etc from one page to another.
    PHP session creates unique user id for each browser to recognize the user and avoid conflict between multiple browsers.
    All Session variables are stored in PHP global variable: $_SESSION.

        e.g
        <?php
            
            session_start(); // start session & sets the session cookie in browser.
            echo session_id(); // Display the session id
            $_SESSION['name'] = 'GeeksForGeeks'; //set session with key name
            $_SESSION['email'] = 'GeeksForGeeks@email.com' ; //set session with key email
        ?>
        <!DOCTYPE html>
        <html>
            <body>
                <?php
                    // Echo session variables that were set on previous page
                    echo "Name is " . $_SESSION["name"] . ".<br>";
                    echo "Email is " . $_SESSION["email"] . ".";

                    // remove all session variables but session exist only data removed.
                    session_unset();

                    //destroys the whole session rather destroying the variables.
                    session_destroy();
                ?>
            </body>
        </html>
    

How do you handle errors in php and what is the difference between exceptions and errors?
    Exceptions are related to the application whereas Errors are related to the environment in which application is running.

    Error are of 4 type
        Parse error or Syntax Error: 
            It is the type of error done by the programmer in the source code of the program. The syntax error is caught by the compiler.
            Parse errors can be caused dues to unclosed quotes, missing or Extra parentheses, Unclosed braces, Missing semicolon etc

        Fatal Error:
            It is the type of error where PHP compiler understand the PHP code but it recognizes an undeclared function. This means that function is called without the definition of function.

        Warning Errors:
            The main reason of warning errors are including a missing file. This means that the PHP function call the missing file.

        Notice Error:
            It is similar to warning error. It means that the program contains something wrong but it allows the execution of script. Error like undefined variable.

    Exceptions
        Exception is used to change the normal flow of the code execution if a specified error (exceptional) condition occurs. This condition is called an exception. we can make use of Try, throw and catch to handle exceptions. Program execution will continue - because you 'caught' the exception. An exception will be treated as an error unless it is caught. It will allow you to continue program execution after it fails as well.


What is object-oriented programming in php? Can you give an example?
    OOP stands for Object-Oriented Programming. (class,object,member variable,member funtion,inheritance,parent class,child class,polymorphism,overloading,data abstraction,encapsulation,constructor)
    Object-oriented programming is about creating objects that contain both data and functions.


Can you explain how php handles file uploads and what are the security concerns with file uploads?
    Which aspect of the file the website fails to validate properly, whether that be its size, type, contents, and so on.
    What restrictions are imposed on the file once it has been successfully uploaded.
    Never let anybody or anything access the file arbitrarily. For example, if an attacker uploads a malicious.php file to your server and you're storing it in the webroot directory of your site, a user can simply go to example.com/uploads/malicious.php to execute that file and run arbitrary PHP code on your server.


What is a php framework and have you worked with any php frameworks before? If yes, which ones and why did you choose them?

Can you explain the Model-View-Controller (MVC) architecture and how you have implemented it in your past projects?

How do you handle version control in your projects and what VCS(version control system) have you used?

Can you discuss your experience with PHP frameworks such as Laravel or CodeIgniter?
    Laravel is an open-sourced web framework known for its server-side handling of routing, HTML authentication, templating, and more. Created by Taylor Otwell, Laravel is written in PHP and is based on Symfony that provides reusable PHP components/libraries. Since it is a server-side-based framework, with Laravel, you can build applications with pre-defined architectures, customized backend logic, web portal, templates, and full-stack apps as well as manage SaaS products.

How do you handle database migrations and what tools have you used for it?
    using migrate and used workbench as a tool for database management.

Can you explain the concept of RESTful API and give an example of how you have implemented it in a project?
    vedanta as a example

Have you worked with third-party integrations and how did you approach the integration process?

Can you discuss your experience with security best practices such as input validation, sanitization, and encryption?

Can you walk us through a project you have worked on that required scaling and how you approached it?
    supreme

Can you tell us about your experience with PHP development and the projects you have worked on?

How do you approach testing and debugging your code?
    phpunit test
    for api postman

Can you explain your understanding of object-oriented programming and design patterns in PHP?
    PHP Design patterns help solve repetitive problems faced during development. It helps make development faster and easier.
    Design Patterns can be used in various situations to solve similar problems. There are more than 30 design patterns that can be broadly categorized into three types - Creational, Structural and Behavioral patterns.

    Creational Patterns: Design patterns that are used in object creation mechanisms, to create objects that can be decoupled from the system that implemented them.

    Structural Patterns: This eases the design by identifying simple ways to realize relationships between entities

    Behavioral Patterns: They are used to manage relationships, responsibilities, and algorithms between objects

    1.Strategy pattern
        useful when we have multiple algorithms for specific task and we want our application to be flexible to chose any of the algorithm at runtime for specific task.
        e.g payment methods algorithms
    2.State pattern
        used when an Object change its behavior based on its internal state.

Can you give an example of how you have integrated a PHP application with a database such as MySQL or PostgreSQL?
    <?php

        function OpenCon() {
            $dbhost = "localhost";
            $dbuser = "root";
            $dbpass = "1234";
            $db = "example";
            $conn = new mysqli($dbhost, $dbuser, $dbpass,$db) or die("Connect failed: %s\n". $conn -> error);

            return $conn;
        }
        
        function CloseCon($conn) {
            $conn -> close();
        }
        
        $conn = OpenCon();
        echo "Connected Successfully";
        CloseCon($conn);
    ?>

Can you walk us through the steps you take when optimizing the performance of a PHP application?


How do you ensure the security of your PHP applications, both from a code and infrastructure perspective?
    Update PHP Regularly (PHP Compatibility Checker tool)
    
    Cross-site scripting (XSS)
        a type of malicious web attack in which an external script is injected into the website’s code or output. can figure out attacker by using htmlspecialchars. Also by using ENT_QUOTES, you can escape single and double quotes.
        $search = $_GET['search'] ?? null; //valnurable
        $search = htmlspecialchars($search, ENT_QUOTES, 'UTF-8'); //safe

    SQL Injection Attacks
        The SQL injection is the most common attack in PHP scripting. A single query can compromise the whole application. In SQL injection attack, the attacker tries to alter the data you are passing via queries. The $username can contain altered data which can damage the database including deleting the whole database in the blink of an eye. So, what’s the solution? PDO. I recommend that you always use prepared statements. PDO helps you in securing SQL queries.
        A good practice is to use ORM like doctrine or eloquent, as there is the least possibility of injecting SQL queries in them.

    Cross site request forgery XSRF/CSRF
        In CSRF attack, the end user can perform unwanted actions on the authenticated websites and can transfer malicious commands to the site to execute any undesirable action.
        CSRF can’t read the request data and mostly targets the state changing request by sending any link or altered data in HTML tags.

    Hide Files from the Browser
        must not place your files in the root directory but in a public folder so that they are not accessible all the time in browser.

    Securely Upload Files
        always use the POST request in the form and declare the property enctype=”multipart/form-data” in <form> tag then validate the file type using finfo class like this
        $finfo = new finfo(FILEINFO_MIME_TYPE);
        $fileContents = file_get_contents($_FILES['some_name']['tmp_name']);
        $mimeType = $finfo->buffer($fileContents);

    Always Validate User Input
        It is important to validate data type, length, and format of user input, and reject inputs that don’t match expected conventions.
    
    Use URL encoding
        URL encoding allows for a safe generation of valid URLs. This prevents security breaches that may happen as a result of user information being exposed.
        <a href="mylink?fruit=', urlencode($fruitID), '">;

    Use SSL Certificates For HTTPS
        All the modern browsers like Google Chrome, Opera, Firefox and others, recommend to use HTTPS protocol for web applications.
        You must include HTTPS by installing SSL certificate into your website. It also strengthens your web applications against XSS attacks and prevents the hackers to read transported data using codes

    Deploy PHP Apps on Clouds
        always recommend to use cloud hosting like DigitalOcean, Linode, AWS. They are fast, safe and secure for any kind of website and application. They always provide secured layer to prevent DDOS, Brute force and phishing attacks which are highly detrimental for web applications.

    Document Root Setup
        The document root for PHP applications on any server must be set to var/www/html so that users can access your website via the browser. But in some cases, when you are developing APIs with frameworks like Laravel, Symfony, and Slim, you need to update the webroot to `/public folder.
        /public serves the output of application similar to simple PHP website with index.php file. The purpose to set the webroot to var/www/html/public is to hide the sensitive files like .htaccess and .env which contain the environment variables and credentials of database, mail, payment APIs.
        Also, frameworks like Laravel, Symfony recommend to not move all of your files to root folder, instead creating a nice directory structure to save related files like view, models and controllers is a more reasonable approach.

    Log all Errors and Hide in Production
        Once you have developed the website and deployed on live server. The first thing you must do is disable the display of errors, because  hackers might get same valuable information from the errors. Set this parameter in your php.ini file - display_errors=Off log_errors=On
        error_log=/var/log/httpd/php_scripts_error.log

    Whitelist Public IP for Mysql
        The public IP for the remote Mysql connection must be whitelisted in your hosting server so that an anonymous user can not get access to the database.

    PHP Malware Finder (PMF)
        one of the top security testing tools that helps to find malicious codes in the files. You can also use RIPS as well, which is a popular code analysis tool that helps to find code vulnerabilities in real-time.


Can you describe your experience with integrating PHP applications with third-party APIs and services?
    Integrated razorpay payment gateway for one of our comonay project.

How do you stay current with developments and advancements in the PHP ecosystem and community?
    Follow laravel news offical site to stay updated with community.
    Laravel v10 is the next major version of Laravel, planned for release on February 7th, 2023.
    Laravel 9: February 8th, 2022
    Laravel 10: February 7th, 2023
    Laravel 11: February 6th, 2024
    Laravel 10 drops support for PHP 8.0 The minimum required version is PHP ^8.1.

Can you give an example of a complex problem you solved using PHP and how you went solving it?
    Implemented vuejs for filter to list all the products and filter them using axios request.
